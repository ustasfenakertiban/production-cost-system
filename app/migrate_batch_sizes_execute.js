require('dotenv').config();
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function migrateBatchSizes() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–∏–π –∑–∞–∫—É–ø–∫–∏...\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—Ç–∏–∏
  const batches = await prisma.materialPurchaseBatch.findMany({
    include: {
      material: { select: { id: true, name: true, batchSize: true } }
    }
  });
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –Ω–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–∞—Ä—Ç–∏—é
  const materialBatches = {};
  batches.forEach(b => {
    const matId = b.material.id;
    if (!materialBatches[matId]) {
      materialBatches[matId] = {
        id: matId,
        name: b.material.name,
        currentBatchSize: b.material.batchSize,
        quantities: []
      };
    }
    materialBatches[matId].quantities.push(b.quantity);
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º batchSize –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  let updated = 0;
  let skipped = 0;
  
  for (const matId in materialBatches) {
    const data = materialBatches[matId];
    const maxQty = Math.max(...data.quantities);
    
    if (data.currentBatchSize === null) {
      await prisma.material.update({
        where: { id: matId },
        data: { batchSize: maxQty }
      });
      
      console.log(`‚úÖ ${data.name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω batchSize = ${maxQty}`);
      updated++;
    } else {
      console.log(`‚è≠Ô∏è  ${data.name}: —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω (${data.currentBatchSize})`);
      skipped++;
    }
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:`);
  console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
  console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
  console.log(`   –í—Å–µ–≥–æ: ${updated + skipped}`);
  
  await prisma.$disconnect();
  console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

migrateBatchSizes().catch(console.error);
