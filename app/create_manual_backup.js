require('dotenv').config({ path: './.env' });
const { PrismaClient } = require('./node_modules/.prisma/client');
const fs = require('fs');
const path = require('path');

async function createBackup() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç users...');
    const users = await prisma.user.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç products...');
    const products = await prisma.product.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç materials...');
    const materials = await prisma.material.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç equipment...');
    const equipment = await prisma.equipment.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç employeeRoles...');
    const employeeRoles = await prisma.employeeRole.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç productionProcesses...');
    const productionProcesses = await prisma.productionProcess.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç operationChains...');
    const operationChains = await prisma.operationChain.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç productionOperations...');
    const productionOperations = await prisma.productionOperation.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç operationMaterials...');
    const operationMaterials = await prisma.operationMaterial.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç operationEquipment...');
    const operationEquipment = await prisma.operationEquipment.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç operationRoles...');
    const operationRoles = await prisma.operationRole.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç operationTemplates...');
    const operationTemplates = await prisma.operationTemplate.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç operationTemplateMaterials...');
    const operationTemplateMaterials = await prisma.operationTemplateMaterial.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç operationTemplateEquipment...');
    const operationTemplateEquipment = await prisma.operationTemplateEquipment.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç operationTemplateRoles...');
    const operationTemplateRoles = await prisma.operationTemplateRole.findMany();
    
    console.log('  - –≠–∫—Å–ø–æ—Ä—Ç backups...');
    const backups = await prisma.backup.findMany();
    
    const data = {
      users,
      products,
      materials,
      equipment,
      employeeRoles,
      productionProcesses,
      operationChains,
      productionOperations,
      operationMaterials,
      operationEquipment,
      operationRoles,
      operationTemplates,
      operationTemplateMaterials,
      operationTemplateEquipment,
      operationTemplateRoles,
      backups
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\./g, '-');
    const filename = `manual_full_backup_${timestamp}.json`;
    const backupDir = path.join(__dirname, '..', 'backups');
    const filepath = path.join(backupDir, filename);
    
    fs.writeFileSync(filepath, JSON.stringify(data, null, 2));
    
    console.log(`\n‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${filename}`);
    console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fs.statSync(filepath).size / 1024).toFixed(2)} KB`);
    console.log(`üìÇ –ü—É—Ç—å: ${filepath}`);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
    Object.entries(data).forEach(([table, records]) => {
      console.log(`  - ${table}: ${records.length} –∑–∞–ø–∏—Å–µ–π`);
    });
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:', error.message);
    console.error(error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

createBackup();
