
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { filename } = body;

    if (!filename) {
      return NextResponse.json(
        { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞' },
        { status: 400 }
      );
    }

    const backupDir = path.join(process.cwd(), 'scripts', 'backups');
    const filePath = path.join(backupDir, filename);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
      return NextResponse.json(
        { success: false, error: '–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: ${filename}`);

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
    const backupData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));

    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    const currentData = {
      timestamp: new Date().toISOString(),
      reason: 'before_restore',
      users: await prisma.user.findMany(),
      materialCategories: await prisma.materialCategory.findMany(),
      materials: await prisma.material.findMany(),
      equipment: await prisma.equipment.findMany(),
      employeeRoles: await prisma.employeeRole.findMany(),
      products: await prisma.product.findMany(),
      productionProcesses: await prisma.productionProcess.findMany(),
      operationChains: await prisma.operationChain.findMany(),
      productionOperations: await prisma.productionOperation.findMany({
        include: {
          operationMaterials: true,
          operationEquipment: true,
          operationRoles: true,
        },
      }),
      operationTemplates: await prisma.operationTemplate.findMany(),
      orders: await prisma.order.findMany(),
      orderItems: await prisma.orderItem.findMany(),
    };

    const beforeRestoreFilename = `backup_before_restore_${new Date().toISOString().replace(/:/g, '-').replace(/\..+/, '')}.json`;
    const beforeRestoreFile = path.join(backupDir, beforeRestoreFilename);
    fs.writeFileSync(beforeRestoreFile, JSON.stringify(currentData, null, 2), 'utf-8');
    console.log(`üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${beforeRestoreFilename}`);

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    await prisma.orderItem.deleteMany({});
    await prisma.order.deleteMany({});
    await prisma.operationTemplate.deleteMany({});
    
    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    await prisma.operationMaterial.deleteMany({});
    await prisma.operationEquipment.deleteMany({});
    await prisma.operationRole.deleteMany({});
    
    await prisma.productionOperation.deleteMany({});
    await prisma.operationChain.deleteMany({});
    await prisma.productionProcess.deleteMany({});
    await prisma.product.deleteMany({});
    await prisma.employeeRole.deleteMany({});
    await prisma.equipment.deleteMany({});
    await prisma.material.deleteMany({});
    await prisma.materialCategory.deleteMany({});
    // –ù–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    console.log('üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    if (backupData.materialCategories) {
      await prisma.materialCategory.createMany({ data: backupData.materialCategories });
    }
    if (backupData.materials) {
      await prisma.material.createMany({ data: backupData.materials });
    }
    if (backupData.equipment) {
      await prisma.equipment.createMany({ data: backupData.equipment });
    }
    if (backupData.employeeRoles) {
      await prisma.employeeRole.createMany({ data: backupData.employeeRoles });
    }
    if (backupData.products) {
      await prisma.product.createMany({ data: backupData.products });
    }
    if (backupData.productionProcesses) {
      await prisma.productionProcess.createMany({ data: backupData.productionProcesses });
    }
    if (backupData.operationChains) {
      await prisma.operationChain.createMany({ data: backupData.operationChains });
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏—Ö —Å–≤—è–∑—è–º–∏
    if (backupData.productionOperations) {
      for (const operation of backupData.productionOperations) {
        const { operationMaterials, operationEquipment, operationRoles, ...operationData } = operation;
        
        await prisma.productionOperation.create({
          data: {
            ...operationData,
            operationMaterials: operationMaterials ? { create: operationMaterials } : undefined,
            operationEquipment: operationEquipment ? { create: operationEquipment } : undefined,
            operationRoles: operationRoles ? { create: operationRoles } : undefined,
          },
        });
      }
    }
    
    if (backupData.operationTemplates) {
      await prisma.operationTemplate.createMany({ data: backupData.operationTemplates });
    }
    if (backupData.orders) {
      await prisma.order.createMany({ data: backupData.orders });
    }
    if (backupData.orderItems) {
      await prisma.orderItem.createMany({ data: backupData.orderItems });
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');

    await prisma.$disconnect();

    return NextResponse.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
      backupBeforeRestore: beforeRestoreFilename,
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
    await prisma.$disconnect();
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}
