generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/production_cost_system/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Equipment {
  id                 String                       @id @default(cuid())
  name               String
  estimatedCost      Float
  hourlyDepreciation Float
  maxProductivity    Float?
  productivityUnits  String?
  comment            String?
  trackInOccupancy   Boolean                      @default(true) // Учитывать в загрузке оборудования (v2)
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  operationEquipment OperationEquipment[]
  templateEquipment  OperationTemplateEquipment[]

  @@map("equipment")
}

model EmployeeRole {
  id             String                  @id @default(cuid())
  name           String
  paymentType    PaymentType
  hourlyRate     Float
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  operationRoles OperationRole[]
  templateRoles  OperationTemplateRole[]
  employeeRoles  EmployeeRoleAssignment[]

  @@map("employee_roles")
}

model Employee {
  id        String                   @id @default(cuid())
  name      String
  isActive  Boolean                  @default(true)
  comment   String?
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  roles     EmployeeRoleAssignment[]

  @@map("employees")
}

model EmployeeRoleAssignment {
  id         String       @id @default(cuid())
  employeeId String
  roleId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  employee   Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  role       EmployeeRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([employeeId, roleId])
  @@map("employee_role_assignments")
}

model Product {
  id                  String              @id @default(cuid())
  name                String
  description         String?
  imagePath           String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  productionProcesses ProductionProcess[]
  orderItems          OrderItem[]

  @@map("products")
}

model MaterialCategory {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  materials Material[]

  @@map("material_categories")
}

model Material {
  id                      String                      @id @default(cuid())
  name                    String
  categoryId              String
  unit                    String
  cost                    Float
  vatPercentage           Float                       @default(0)
  minStockPercentage      Float?                      @default(0) // Минимальный неснижаемый остаток от партии закупки (в %)
  batchSize               Float?                      // Размер партии закупки
  prepaymentPercentage    Float?                      @default(0) // % предоплаты при закупке
  manufacturingDays       Int?                        @default(0) // Срок изготовления в днях
  deliveryDays            Int?                        @default(0) // Срок доставки в днях
  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt
  comment                 String?
  category                MaterialCategory            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  operationMaterials      OperationMaterial[]
  templateMaterials       OperationTemplateMaterial[]
  materialPurchaseBatches MaterialPurchaseBatch[]     // Партии закупки (v2)

  @@map("materials")
}

model RecurringExpense {
  id               String           @id @default(cuid())
  name             String
  period           ExpensePeriod
  amount           Float
  distributionType DistributionType @default(PROPORTIONAL)
  active           Boolean          @default(true)
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("recurring_expenses")
}

model ProductionProcess {
  id              String           @id @default(cuid())
  productId       String
  name            String
  description     String?
  comment         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  operationChains OperationChain[]
  orderItems      OrderItem[]
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("production_processes")
}

model OperationChain {
  id                String                @id @default(cuid())
  processId         String
  name              String
  chainType         ChainType
  orderIndex        Int                   @default(1)
  comment           String?
  enabled           Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  estimatedQuantity Int?
  process           ProductionProcess     @relation(fields: [processId], references: [id], onDelete: Cascade)
  operations        ProductionOperation[]

  @@map("operation_chains")
}

model ProductionOperation {
  id                         String               @id @default(cuid())
  chainId                    String
  name                       String
  description                String?
  comment                    String?
  orderIndex                 Int
  enabled                    Boolean              @default(true)
  estimatedProductivityPerHour Float?
  estimatedProductivityPerHourVariance Float?
  cycleHours                 Float?
  operationDuration          Float?
  minimumBatchSize           Int?                 @default(1)
  cycleName                  String?
  cyclesPerHour              Float?
  itemsPerCycle              Float?
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  operationEquipment         OperationEquipment[]
  operationMaterials         OperationMaterial[]
  operationRoles             OperationRole[]
  chain                      OperationChain       @relation(fields: [chainId], references: [id], onDelete: Cascade)

  @@map("production_operations")
}

model OperationMaterial {
  id              String              @id @default(cuid())
  operationId     String
  materialId      String
  quantity        Float
  quantityPerHour Float?
  unitPrice       Float
  totalCost       Float
  variance        Float?
  comment         String?
  enabled         Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  material        Material            @relation(fields: [materialId], references: [id], onDelete: Cascade)
  operation       ProductionOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@map("operation_materials")
}

model OperationEquipment {
  id               String              @id @default(cuid())
  operationId      String
  equipmentId      String
  machineTime      Float
  machineTimeSeconds Float?
  piecesPerHour    Float?
  hourlyRate       Float
  totalCost        Float
  variance         Float?
  comment          String?
  enabled          Boolean             @default(true)
  requiresContinuousOperation Boolean  @default(true)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  equipment        Equipment           @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  operation        ProductionOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@map("operation_equipment")
}

model OperationRole {
  id             String              @id @default(cuid())
  operationId    String
  roleId         String
  timeSpent      Float
  timeSpentSeconds Float?
  piecesPerHour  Float?
  paymentType    PaymentType
  rate           Float
  totalCost      Float
  variance       Float?
  comment        String?
  enabled        Boolean             @default(true)
  requiresContinuousPresence Boolean @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  operation      ProductionOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  role           EmployeeRole        @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("operation_roles")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum PaymentType {
  HOURLY
  PIECE_RATE
}

enum ExpensePeriod {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum DistributionType {
  FIXED        // Фиксированные расходы (вычесть в конце заказа)
  PROPORTIONAL // Распределить равномерно на всю продукцию
}

enum ChainType {
  ONE_TIME
  PER_UNIT
}

model Order {
  id                      String                  @id @default(cuid())
  name                    String
  orderDate               DateTime
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  orderItems              OrderItem[]
  simulationSettingsV2    SimulationSettingsV2?   // Настройки симуляции v2 (один к одному)
  paymentSchedules        PaymentSchedule[]       // График платежей
  materialPurchaseBatches MaterialPurchaseBatch[] // Партии закупки материалов

  @@map("orders")
}

model OrderItem {
  id                   String            @id @default(cuid())
  orderId              String
  productId            String
  quantity             Int
  productionProcessId  String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  order                Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product              Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productionProcess    ProductionProcess @relation(fields: [productionProcessId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model OperationTemplate {
  id                               String                        @id @default(cuid())
  name                             String
  description                      String?
  comment                          String?
  enabled                          Boolean                       @default(true)
  estimatedProductivityPerHour     Float?
  estimatedProductivityPerHourVariance Float?
  cycleHours                       Float?
  operationDuration                Float?
  minimumBatchSize                 Int?                          @default(1)
  cycleName                        String?
  cyclesPerHour                    Float?
  itemsPerCycle                    Float?
  createdAt                        DateTime                      @default(now())
  updatedAt                        DateTime                      @updatedAt
  materials                        OperationTemplateMaterial[]
  equipment                        OperationTemplateEquipment[]
  roles                            OperationTemplateRole[]

  @@map("operation_templates")
}

model OperationTemplateMaterial {
  id         String            @id @default(cuid())
  templateId String
  materialId String
  quantity   Float
  unitPrice  Float
  totalCost  Float
  variance   Float?
  comment    String?
  enabled    Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  template   OperationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  material   Material          @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@map("operation_template_materials")
}

model OperationTemplateEquipment {
  id                          String            @id @default(cuid())
  templateId                  String
  equipmentId                 String
  machineTime                 Float
  machineTimeSeconds          Float?
  piecesPerHour               Float?
  hourlyRate                  Float
  totalCost                   Float
  variance                    Float?
  comment                     String?
  enabled                     Boolean           @default(true)
  requiresContinuousOperation Boolean           @default(true)
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
  template                    OperationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  equipment                   Equipment         @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@map("operation_template_equipment")
}

model OperationTemplateRole {
  id                         String            @id @default(cuid())
  templateId                 String
  roleId                     String
  timeSpent                  Float
  timeSpentSeconds           Float?
  piecesPerHour              Float?
  paymentType                PaymentType
  rate                       Float
  totalCost                  Float
  variance                   Float?
  comment                    String?
  enabled                    Boolean           @default(true)
  requiresContinuousPresence Boolean           @default(true)
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  template                   OperationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  role                       EmployeeRole      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("operation_template_roles")
}

model SimulationSettings {
  id                    String   @id @default(cuid())
  payIdleTime           Boolean  @default(true)  // Доплачивать за простой сотрудникам
  enablePartialWork     Boolean  @default(true)  // Выполнять частичные операции при наличии свободных ресурсов
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("simulation_settings")
}

model Backup {
  id         String   @id @default(cuid())
  filename   String   // Имя файла бэкапа
  filePath   String   // Путь к файлу на диске
  type       String   @default("data-only") // data-only или full
  size       Int      // Размер файла в байтах
  schemaHash String?  // Хэш схемы базы данных для проверки совместимости
  createdAt  DateTime @default(now())

  @@map("backups")
}

// ===============================================
// SIMULATION V2 MODELS
// ===============================================

model SimulationSettingsV2 {
  id                              String   @id @default(cuid())
  orderId                         String   @unique // Связь с заказом
  workingHoursPerDay              Float    @default(8)    // Количество рабочих часов в день
  restMinutesPerHour              Float    @default(0)    // Количество минут отдыха в час
  sellingPriceWithVAT             Float?                  // Продажная цена с НДС
  vatRate                         Float    @default(20)   // Ставка НДС, %
  profitTaxRate                   Float    @default(20)   // Ставка налога на прибыль, %
  includeRecurringExpenses        Boolean  @default(false) // Учитывать периодические расходы
  waitForMaterialDelivery         Boolean  @default(true)  // Ждать поставку материалов
  payEmployeesForIdleTime         Boolean  @default(false) // Доплачивать сотрудникам за простой (округлять до часа)
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  order                           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("simulation_settings_v2")
}

model PaymentSchedule {
  id              String   @id @default(cuid())
  orderId         String   // Связь с заказом
  dayNumber       Int      // День от начала заказа (1, 2, 3...)
  percentageOfTotal Float  // Процент от общей суммы заказа
  amount          Float?   // Сумма платежа (может быть рассчитана автоматически)
  description     String?  // Описание платежа
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_schedules")
}

model MaterialPurchaseBatch {
  id                   String   @id @default(cuid())
  orderId              String   // Связь с заказом
  materialId           String   // Связь с материалом
  quantity             Float    // Количество материала в партии
  pricePerUnit         Float    // Цена за единицу
  totalCost            Float    // Общая стоимость партии
  prepaymentPercentage Float    @default(0) // % предоплаты для этой партии
  prepaymentPaid       Float    @default(0) // Сумма оплаченной предоплаты
  remainingAmount      Float    @default(0) // Остаток к оплате
  manufacturingDay     Int      @default(0) // День когда изготовится (0 = не указан/уже изготовлен)
  deliveryDay          Int      // День поступления (от начала заказа)
  status               String   @default("planned") // planned, manufacturing, in_transit, delivered
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  order                Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  material             Material @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@map("material_purchase_batches")
}
