generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/production_cost_system/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Equipment {
  id                 String               @id @default(cuid())
  name               String
  estimatedCost      Float
  hourlyDepreciation Float
  maxProductivity    Float?
  productivityUnits  String?
  comment            String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  operationEquipment OperationEquipment[]

  @@map("equipment")
}

model EmployeeRole {
  id             String          @id @default(cuid())
  name           String
  paymentType    PaymentType
  hourlyRate     Float
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  operationRoles OperationRole[]

  @@map("employee_roles")
}

model Product {
  id                  String              @id @default(cuid())
  name                String
  description         String?
  imagePath           String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  productionProcesses ProductionProcess[]

  @@map("products")
}

model MaterialCategory {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  materials Material[]

  @@map("material_categories")
}

model Material {
  id                 String              @id @default(cuid())
  name               String
  categoryId         String
  unit               String
  cost               Float
  vatPercentage      Float               @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  comment            String?
  category           MaterialCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  operationMaterials OperationMaterial[]

  @@map("materials")
}

model RecurringExpense {
  id        String        @id @default(cuid())
  name      String
  period    ExpensePeriod
  amount    Float
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("recurring_expenses")
}

model ProductionProcess {
  id              String           @id @default(cuid())
  productId       String
  name            String
  description     String?
  comment         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  operationChains OperationChain[]
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("production_processes")
}

model OperationChain {
  id                String                @id @default(cuid())
  processId         String
  name              String
  chainType         ChainType
  orderIndex        Int                   @default(1)
  comment           String?
  enabled           Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  estimatedQuantity Int?
  process           ProductionProcess     @relation(fields: [processId], references: [id], onDelete: Cascade)
  operations        ProductionOperation[]

  @@map("operation_chains")
}

model ProductionOperation {
  id                         String               @id @default(cuid())
  chainId                    String
  name                       String
  description                String?
  comment                    String?
  orderIndex                 Int
  enabled                    Boolean              @default(true)
  estimatedProductivityPerHour Float?
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  operationEquipment         OperationEquipment[]
  operationMaterials         OperationMaterial[]
  operationRoles             OperationRole[]
  chain                      OperationChain       @relation(fields: [chainId], references: [id], onDelete: Cascade)

  @@map("production_operations")
}

model OperationMaterial {
  id          String              @id @default(cuid())
  operationId String
  materialId  String
  quantity    Float
  unitPrice   Float
  totalCost   Float
  variance    Float?
  comment     String?
  enabled     Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  material    Material            @relation(fields: [materialId], references: [id], onDelete: Cascade)
  operation   ProductionOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@map("operation_materials")
}

model OperationEquipment {
  id               String              @id @default(cuid())
  operationId      String
  equipmentId      String
  machineTime      Float
  machineTimeSeconds Float?
  hourlyRate       Float
  totalCost        Float
  variance         Float?
  comment          String?
  enabled          Boolean             @default(true)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  equipment        Equipment           @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  operation        ProductionOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@map("operation_equipment")
}

model OperationRole {
  id             String              @id @default(cuid())
  operationId    String
  roleId         String
  timeSpent      Float
  timeSpentSeconds Float?
  paymentType    PaymentType
  rate           Float
  totalCost      Float
  variance       Float?
  comment        String?
  enabled        Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  operation      ProductionOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  role           EmployeeRole        @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("operation_roles")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum PaymentType {
  HOURLY
  PIECE_RATE
}

enum ExpensePeriod {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum ChainType {
  ONE_TIME
  PER_UNIT
}
