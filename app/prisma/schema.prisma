generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/production_cost_system/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PaymentType {
  HOURLY     // почасовая
  PIECE_RATE // сдельная
}

enum ExpensePeriod {
  DAY       // день
  WEEK      // неделя
  MONTH     // месяц
  QUARTER   // квартал
  YEAR      // год
}

enum ChainType {
  ONE_TIME     // разовая (единожды для товара)
  PER_UNIT     // на единицу товара
}

model Equipment {
  id                    String   @id @default(cuid())
  name                  String   // название
  estimatedCost         Float    // оценочная стоимость
  hourlyDepreciation    Float    // амортизация в час
  maxProductivity       Float    // максимальная производительность
  productivityUnits     String   // единицы производительности
  comment               String?  // комментарий
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  operationEquipment OperationEquipment[]

  @@map("equipment")
}

model EmployeeRole {
  id           String      @id @default(cuid())
  name         String      // наименование роли
  paymentType  PaymentType // тип оплаты
  hourlyRate   Float       // базовая стоимость часа
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  operationRoles OperationRole[]

  @@map("employee_roles")
}

model Product {
  id             String   @id @default(cuid())
  name           String   // наименование
  description    String?  // описание
  imagePath      String?  // путь к фото (cloud_storage_path)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  productionProcesses ProductionProcess[]

  @@map("products")
}

model MaterialCategory {
  id        String     @id @default(cuid())
  name      String     @unique // наименование категории
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  materials Material[]

  @@map("material_categories")
}

model Material {
  id         String           @id @default(cuid())
  name       String           // наименование материала
  categoryId String           // ID категории
  unit       String           // единица измерения
  cost       Float            // стоимость
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  
  category   MaterialCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  operationMaterials OperationMaterial[]

  @@map("materials")
}

model RecurringExpense {
  id        String        @id @default(cuid())
  name      String        // наименование расхода
  period    ExpensePeriod // период расхода
  amount    Float         // сумма
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("recurring_expenses")
}

// Производственные процессы
model ProductionProcess {
  id          String   @id @default(cuid())
  productId   String   // связь с товаром
  name        String   // наименование процесса
  description String?  // описание процесса
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  operationChains OperationChain[]

  @@map("production_processes")
}

// Цепочки операций
model OperationChain {
  id        String    @id @default(cuid())
  processId String    // связь с производственным процессом
  name      String    // наименование цепочки
  chainType ChainType // тип цепочки (разовая/на единицу)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  process    ProductionProcess    @relation(fields: [processId], references: [id], onDelete: Cascade)
  operations ProductionOperation[]

  @@map("operation_chains")
}

// Производственные операции
model ProductionOperation {
  id          String   @id @default(cuid())
  chainId     String   // связь с цепочкой операций
  name        String   // наименование операции
  description String?  // описание операции
  orderIndex  Int      // порядок операции в цепочке
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chain              OperationChain      @relation(fields: [chainId], references: [id], onDelete: Cascade)
  operationMaterials OperationMaterial[]
  operationEquipment OperationEquipment[]
  operationRoles     OperationRole[]

  @@map("production_operations")
}

// Материалы в операции
model OperationMaterial {
  id          String  @id @default(cuid())
  operationId String  // связь с операцией
  materialId  String  // связь с материалом
  quantity    Float   // количество
  unitPrice   Float   // цена за единицу
  totalCost   Float   // общая стоимость
  variance    Float?  // разброс в %
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  operation ProductionOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  material  Material             @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@map("operation_materials")
}

// Оборудование в операции
model OperationEquipment {
  id           String  @id @default(cuid())
  operationId  String  // связь с операцией
  equipmentId  String  // связь с оборудованием
  machineTime  Float   // машинное время
  hourlyRate   Float   // стоимость в час
  totalCost    Float   // общая стоимость
  variance     Float?  // разброс в %
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  operation ProductionOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  equipment Equipment            @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@map("operation_equipment")
}

// Роли сотрудников в операции
model OperationRole {
  id          String      @id @default(cuid())
  operationId String      // связь с операцией
  roleId      String      // связь с ролью сотрудника
  timeSpent   Float       // время на операцию
  paymentType PaymentType // вид оплаты (часовая/за операцию)
  rate        Float       // ставка
  totalCost   Float       // общая стоимость
  variance    Float?      // разброс в %
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  operation ProductionOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  role      EmployeeRole         @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("operation_roles")
}

// Пользователи системы
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
