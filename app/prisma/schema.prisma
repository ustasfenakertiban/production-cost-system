generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/production_cost_system/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PaymentType {
  HOURLY     // почасовая
  PIECE_RATE // сдельная
}

enum ExpensePeriod {
  DAY       // день
  WEEK      // неделя
  MONTH     // месяц
  QUARTER   // квартал
  YEAR      // год
}

model Equipment {
  id                    String   @id @default(cuid())
  name                  String   // название
  estimatedCost         Float    // оценочная стоимость
  hourlyDepreciation    Float    // амортизация в час
  maxProductivity       Float    // максимальная производительность
  productivityUnits     String   // единицы производительности
  comment               String?  // комментарий
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("equipment")
}

model EmployeeRole {
  id           String      @id @default(cuid())
  name         String      // наименование роли
  paymentType  PaymentType // тип оплаты
  hourlyRate   Float       // базовая стоимость часа
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("employee_roles")
}

model Product {
  id             String   @id @default(cuid())
  name           String   // наименование
  description    String?  // описание
  imagePath      String?  // путь к фото (cloud_storage_path)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("products")
}

model MaterialCategory {
  id        String     @id @default(cuid())
  name      String     @unique // наименование категории
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  materials Material[]

  @@map("material_categories")
}

model Material {
  id         String           @id @default(cuid())
  name       String           // наименование материала
  categoryId String           // ID категории
  unit       String           // единица измерения
  cost       Float            // стоимость
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  
  category   MaterialCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("materials")
}

model RecurringExpense {
  id        String        @id @default(cuid())
  name      String        // наименование расхода
  period    ExpensePeriod // период расхода
  amount    Float         // сумма
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("recurring_expenses")
}
