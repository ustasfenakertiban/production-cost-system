
/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 * –°–æ–∑–¥–∞—ë—Ç –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const BACKUP_DIR = path.join(__dirname, 'backups');
const MAX_BACKUPS = 30; // –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –±—ç–∫–∞–ø–æ–≤

// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
if (!fs.existsSync(BACKUP_DIR)) {
  fs.mkdirSync(BACKUP_DIR, { recursive: true });
}

function createBackup(reason = 'manual') {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `backup_${reason}_${timestamp}.sql`;
  const filepath = path.join(BACKUP_DIR, filename);
  
  console.log(`\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: ${filename}`);
  console.log(`üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
  
  try {
    const dbUrl = process.env.DATABASE_URL;
    if (!dbUrl) {
      throw new Error('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º pg_dump –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
    const command = `pg_dump "${dbUrl}" > "${filepath}"`;
    execSync(command, { stdio: 'inherit' });
    
    console.log(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${filepath}`);
    console.log(`üì¶ –†–∞–∑–º–µ—Ä: ${(fs.statSync(filepath).size / 1024).toFixed(2)} KB`);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
    cleanOldBackups();
    
    return filepath;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:', error.message);
    throw error;
  }
}

function cleanOldBackups() {
  const files = fs.readdirSync(BACKUP_DIR)
    .filter(f => f.startsWith('backup_') && f.endsWith('.sql'))
    .map(f => ({
      name: f,
      path: path.join(BACKUP_DIR, f),
      time: fs.statSync(path.join(BACKUP_DIR, f)).mtime.getTime()
    }))
    .sort((a, b) => b.time - a.time);
  
  if (files.length > MAX_BACKUPS) {
    const toDelete = files.slice(MAX_BACKUPS);
    toDelete.forEach(file => {
      fs.unlinkSync(file.path);
      console.log(`üóëÔ∏è  –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: ${file.name}`);
    });
  }
}

function listBackups() {
  const files = fs.readdirSync(BACKUP_DIR)
    .filter(f => f.startsWith('backup_') && f.endsWith('.sql'))
    .map(f => ({
      name: f,
      path: path.join(BACKUP_DIR, f),
      size: fs.statSync(path.join(BACKUP_DIR, f)).size,
      time: fs.statSync(path.join(BACKUP_DIR, f)).mtime
    }))
    .sort((a, b) => b.time - a.time);
  
  console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:\n');
  files.forEach((file, i) => {
    console.log(`${i + 1}. ${file.name}`);
    console.log(`   –î–∞—Ç–∞: ${file.time.toLocaleString('ru-RU')}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(2)} KB\n`);
  });
  
  return files;
}

// CLI
const args = process.argv.slice(2);
const command = args[0] || 'create';
const reason = args[1] || 'manual';

if (command === 'create') {
  createBackup(reason);
} else if (command === 'list') {
  listBackups();
} else {
  console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/auto-backup.js create [–ø—Ä–∏—á–∏–Ω–∞]  - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
  node scripts/auto-backup.js list               - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
  
–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/auto-backup.js create before_migration
  node scripts/auto-backup.js create manual
  node scripts/auto-backup.js list
  `);
}

module.exports = { createBackup, listBackups, cleanOldBackups };
