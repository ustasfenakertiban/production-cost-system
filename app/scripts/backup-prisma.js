
/**
 * –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Prisma
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç
 */
const fs = require('fs');
const path = require('path');
const { PrismaClient } = require('@prisma/client');

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const prisma = new PrismaClient();
const BACKUP_DIR = path.join(__dirname, 'backups');
const MAX_BACKUPS = 30;

// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
if (!fs.existsSync(BACKUP_DIR)) {
  fs.mkdirSync(BACKUP_DIR, { recursive: true });
}

async function createBackup(reason = 'manual') {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `backup_${reason}_${timestamp}.json`;
  const filepath = path.join(BACKUP_DIR, filename);
  
  console.log(`\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: ${filename}`);
  console.log(`üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
  
  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Prisma –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  const backupPrisma = new PrismaClient();
  
  try {
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const data = {
      metadata: {
        timestamp: new Date().toISOString(),
        reason,
        version: '1.0'
      }
    };
    
    console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
    
    data.users = await backupPrisma.user.findMany();
    data.materialCategories = await backupPrisma.materialCategory.findMany();
    data.materials = await backupPrisma.material.findMany();
    data.equipment = await backupPrisma.equipment.findMany();
    data.employeeRoles = await backupPrisma.employeeRole.findMany();
    data.recurringExpenses = await backupPrisma.recurringExpense.findMany();
    data.products = await backupPrisma.product.findMany();
    data.productionProcesses = await backupPrisma.productionProcess.findMany();
    data.operationChains = await backupPrisma.operationChain.findMany();
    data.productionOperations = await backupPrisma.productionOperation.findMany({
      include: {
        operationMaterials: true,
        operationEquipment: true,
        operationRoles: true
      }
    });
    data.operationTemplates = await backupPrisma.operationTemplate.findMany({
      include: {
        materials: true,
        equipment: true,
        roles: true
      }
    });
    data.orders = await backupPrisma.order.findMany();
    data.orderItems = await backupPrisma.orderItem.findMany();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {};
    let totalRecords = 0;
    for (const [key, value] of Object.entries(data)) {
      if (key !== 'metadata' && Array.isArray(value)) {
        stats[key] = value.length;
        totalRecords += value.length;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync(filepath, JSON.stringify(data, null, 2));
    
    const fileSize = fs.statSync(filepath).size;
    
    console.log(`\n‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
    console.log(`üì¶ –†–∞–∑–º–µ—Ä: ${(fileSize / 1024).toFixed(2)} KB`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}\n`);
    
    console.log('üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    Object.entries(stats).forEach(([key, count]) => {
      if (count > 0) {
        console.log(`   ${key}: ${count}`);
      }
    });
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
    cleanOldBackups();
    
    return filepath;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:', error.message);
    console.error(error.stack);
    throw error;
  } finally {
    await backupPrisma.$disconnect();
  }
}

function cleanOldBackups() {
  const files = fs.readdirSync(BACKUP_DIR)
    .filter(f => f.startsWith('backup_') && f.endsWith('.json'))
    .map(f => ({
      name: f,
      path: path.join(BACKUP_DIR, f),
      time: fs.statSync(path.join(BACKUP_DIR, f)).mtime.getTime()
    }))
    .sort((a, b) => b.time - a.time);
  
  if (files.length > MAX_BACKUPS) {
    const toDelete = files.slice(MAX_BACKUPS);
    toDelete.forEach(file => {
      fs.unlinkSync(file.path);
      console.log(`üóëÔ∏è  –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: ${file.name}`);
    });
  }
}

function listBackups() {
  const files = fs.readdirSync(BACKUP_DIR)
    .filter(f => f.startsWith('backup_') && f.endsWith('.json'))
    .map(f => ({
      name: f,
      path: path.join(BACKUP_DIR, f),
      size: fs.statSync(path.join(BACKUP_DIR, f)).size,
      time: fs.statSync(path.join(BACKUP_DIR, f)).mtime
    }))
    .sort((a, b) => b.time - a.time);
  
  console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:\n');
  files.forEach((file, i) => {
    const data = JSON.parse(fs.readFileSync(file.path, 'utf-8'));
    let totalRecords = 0;
    for (const [key, value] of Object.entries(data)) {
      if (key !== 'metadata' && Array.isArray(value)) {
        totalRecords += value.length;
      }
    }
    
    console.log(`${i + 1}. ${file.name}`);
    console.log(`   –î–∞—Ç–∞: ${file.time.toLocaleString('ru-RU')}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(2)} KB`);
    console.log(`   –ó–∞–ø–∏—Å–µ–π: ${totalRecords}\n`);
  });
  
  return files;
}

// CLI
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0] || 'create';
  const reason = args[1] || 'manual';

  if (command === 'create') {
    createBackup(reason).catch(console.error);
  } else if (command === 'list') {
    listBackups();
  } else {
    console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/backup-prisma.js create [–ø—Ä–∏—á–∏–Ω–∞]  - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
  node scripts/backup-prisma.js list               - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
  
–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/backup-prisma.js create before_migration
  node scripts/backup-prisma.js create manual
  node scripts/backup-prisma.js list
    `);
  }
}

module.exports = { createBackup, listBackups, cleanOldBackups };
