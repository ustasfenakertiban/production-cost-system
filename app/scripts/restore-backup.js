
/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –±—ç–∫–∞–ø –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const readline = require('readline');

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const BACKUP_DIR = path.join(__dirname, 'backups');

function listBackups() {
  if (!fs.existsSync(BACKUP_DIR)) {
    console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return [];
  }
  
  const files = fs.readdirSync(BACKUP_DIR)
    .filter(f => f.startsWith('backup_') && f.endsWith('.sql'))
    .map(f => ({
      name: f,
      path: path.join(BACKUP_DIR, f),
      size: fs.statSync(path.join(BACKUP_DIR, f)).size,
      time: fs.statSync(path.join(BACKUP_DIR, f)).mtime
    }))
    .sort((a, b) => b.time - a.time);
  
  return files;
}

async function restoreBackup(backupPath) {
  console.log(`\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: ${path.basename(backupPath)}`);
  
  const dbUrl = process.env.DATABASE_URL;
  if (!dbUrl) {
    throw new Error('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
  }
  
  try {
    // –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
    const { createBackup } = require('./auto-backup.js');
    createBackup('before_restore');
    
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!');
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...\n');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
    const command = `psql "${dbUrl}" < "${backupPath}"`;
    execSync(command, { stdio: 'inherit' });
    
    console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
    console.log('üìù –ë—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–∫–∞—Ç–∞\n');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
    throw error;
  }
}

async function interactiveRestore() {
  const backups = listBackups();
  
  if (backups.length === 0) {
    console.log('‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë       –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò          ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
  
  console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:\n');
  backups.forEach((file, i) => {
    console.log(`${i + 1}. ${file.name}`);
    console.log(`   –î–∞—Ç–∞: ${file.time.toLocaleString('ru-RU')}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(2)} KB\n`);
  });
  
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  rl.question('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): ', async (answer) => {
    const index = parseInt(answer) - 1;
    
    if (answer === '0') {
      console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
      rl.close();
      return;
    }
    
    if (index < 0 || index >= backups.length) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä');
      rl.close();
      return;
    }
    
    const selected = backups[index];
    
    rl.question(`\n‚ö†Ô∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ "${selected.name}"? (–¥–∞/–Ω–µ—Ç): `, async (confirm) => {
      if (confirm.toLowerCase() === '–¥–∞' || confirm.toLowerCase() === 'yes') {
        try {
          await restoreBackup(selected.path);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞:', error.message);
        }
      } else {
        console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
      }
      rl.close();
    });
  });
}

// CLI
const args = process.argv.slice(2);

if (args[0] === 'list') {
  const backups = listBackups();
  if (backups.length === 0) {
    console.log('‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
} else if (args[0] && fs.existsSync(args[0])) {
  restoreBackup(args[0]).catch(console.error);
} else {
  interactiveRestore().catch(console.error);
}

module.exports = { restoreBackup, listBackups };
