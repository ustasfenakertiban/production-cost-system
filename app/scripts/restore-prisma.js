
/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –±—ç–∫–∞–ø–∞ (Prisma)
 */
const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { PrismaClient } = require('@prisma/client');

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const prisma = new PrismaClient();
const BACKUP_DIR = path.join(__dirname, 'backups');

function listBackups() {
  if (!fs.existsSync(BACKUP_DIR)) {
    console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return [];
  }
  
  const files = fs.readdirSync(BACKUP_DIR)
    .filter(f => f.startsWith('backup_') && f.endsWith('.json'))
    .map(f => ({
      name: f,
      path: path.join(BACKUP_DIR, f),
      size: fs.statSync(path.join(BACKUP_DIR, f)).size,
      time: fs.statSync(path.join(BACKUP_DIR, f)).mtime
    }))
    .sort((a, b) => b.time - a.time);
  
  return files;
}

async function restoreBackup(backupPath) {
  console.log(`\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: ${path.basename(backupPath)}`);
  
  try {
    // –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
    const { createBackup } = require('./backup-prisma.js');
    await createBackup('before_restore');
    
    // –ß–∏—Ç–∞–µ–º –±—ç–∫–∞–ø
    const data = JSON.parse(fs.readFileSync(backupPath, 'utf-8'));
    
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!');
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...\n');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
    await prisma.$transaction(async (tx) => {
      // –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–Ω–∞—á–∞–ª–∞
      await tx.orderItem.deleteMany();
      await tx.order.deleteMany();
      await tx.productionOperation.deleteMany();
      await tx.productionProcess.deleteMany();
      await tx.product.deleteMany();
      await tx.recurringExpense.deleteMany();
      
      await tx.operationTemplateMaterial.deleteMany();
      await tx.operationTemplateEquipment.deleteMany();
      await tx.operationTemplateRole.deleteMany();
      await tx.operationTemplate.deleteMany();
      
      await tx.operationMaterial.deleteMany();
      await tx.operationEquipment.deleteMany();
      await tx.operationRole.deleteMany();
      await tx.operation.deleteMany();
      await tx.operationChain.deleteMany();
      
      await tx.employeeRole.deleteMany();
      await tx.equipment.deleteMany();
      await tx.material.deleteMany();
      await tx.materialCategory.deleteMany();
      
      // –ù–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –±—ç–∫–∞–ø–µ
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    await prisma.$transaction(async (tx) => {
      // –ë–∞–∑–æ–≤—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
      if (data.materialCategories?.length) {
        for (const item of data.materialCategories) {
          await tx.materialCategory.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${data.materialCategories.length}`);
      }
      
      if (data.materials?.length) {
        for (const item of data.materials) {
          await tx.material.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${data.materials.length}`);
      }
      
      if (data.equipment?.length) {
        for (const item of data.equipment) {
          await tx.equipment.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${data.equipment.length}`);
      }
      
      if (data.employeeRoles?.length) {
        for (const item of data.employeeRoles) {
          await tx.employeeRole.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–ª–µ–π: ${data.employeeRoles.length}`);
      }
      
      if (data.recurringExpenses?.length) {
        for (const item of data.recurringExpenses) {
          await tx.recurringExpense.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: ${data.recurringExpenses.length}`);
      }
      
      // –¶–µ–ø–æ—á–∫–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (data.operationChains?.length) {
        for (const item of data.operationChains) {
          await tx.operationChain.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–ø–æ—á–µ–∫: ${data.operationChains.length}`);
      }
      
      if (data.operations?.length) {
        for (const item of data.operations) {
          const { materials, equipment, roles, ...operationData } = item;
          await tx.operation.create({
            data: {
              ...operationData,
              materials: { create: materials },
              equipment: { create: equipment },
              roles: { create: roles }
            }
          });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${data.operations.length}`);
      }
      
      // –®–∞–±–ª–æ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
      if (data.operationTemplates?.length) {
        for (const item of data.operationTemplates) {
          const { materials, equipment, roles, ...templateData } = item;
          await tx.operationTemplate.create({
            data: {
              ...templateData,
              materials: { create: materials },
              equipment: { create: equipment },
              roles: { create: roles }
            }
          });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${data.operationTemplates.length}`);
      }
      
      // –ü—Ä–æ–¥—É–∫—Ç—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
      if (data.products?.length) {
        for (const item of data.products) {
          await tx.product.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${data.products.length}`);
      }
      
      if (data.productionProcesses?.length) {
        for (const item of data.productionProcesses) {
          await tx.productionProcess.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${data.productionProcesses.length}`);
      }
      
      if (data.productionOperations?.length) {
        for (const item of data.productionOperations) {
          await tx.productionOperation.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${data.productionOperations.length}`);
      }
      
      // –ó–∞–∫–∞–∑—ã
      if (data.orders?.length) {
        for (const item of data.orders) {
          await tx.order.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${data.orders.length}`);
      }
      
      if (data.orderItems?.length) {
        for (const item of data.orderItems) {
          await tx.orderItem.create({ data: item });
        }
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤: ${data.orderItems.length}`);
      }
    });
    
    console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
    console.log(`üìÖ –î–∞—Ç–∞ –±—ç–∫–∞–ø–∞: ${data.metadata.timestamp}`);
    console.log(`üìù –ü—Ä–∏—á–∏–Ω–∞: ${data.metadata.reason}`);
    console.log('üíæ –ë—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–∫–∞—Ç–∞\n');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
    console.error(error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

async function interactiveRestore() {
  const backups = listBackups();
  
  if (backups.length === 0) {
    console.log('‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë       –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò          ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
  
  console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:\n');
  backups.forEach((file, i) => {
    const data = JSON.parse(fs.readFileSync(file.path, 'utf-8'));
    let totalRecords = 0;
    for (const [key, value] of Object.entries(data)) {
      if (key !== 'metadata' && Array.isArray(value)) {
        totalRecords += value.length;
      }
    }
    
    console.log(`${i + 1}. ${file.name}`);
    console.log(`   –î–∞—Ç–∞: ${file.time.toLocaleString('ru-RU')}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(2)} KB`);
    console.log(`   –ó–∞–ø–∏—Å–µ–π: ${totalRecords}\n`);
  });
  
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  rl.question('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): ', async (answer) => {
    const index = parseInt(answer) - 1;
    
    if (answer === '0') {
      console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
      rl.close();
      return;
    }
    
    if (index < 0 || index >= backups.length) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä');
      rl.close();
      return;
    }
    
    const selected = backups[index];
    
    rl.question(`\n‚ö†Ô∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ "${selected.name}"? (–¥–∞/–Ω–µ—Ç): `, async (confirm) => {
      if (confirm.toLowerCase() === '–¥–∞' || confirm.toLowerCase() === 'yes') {
        try {
          await restoreBackup(selected.path);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞:', error.message);
        }
      } else {
        console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
      }
      rl.close();
    });
  });
}

// CLI
if (require.main === module) {
  const args = process.argv.slice(2);

  if (args[0] === 'list') {
    const backups = listBackups();
    if (backups.length === 0) {
      console.log('‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      backups.forEach((file, i) => {
        const data = JSON.parse(fs.readFileSync(file.path, 'utf-8'));
        let totalRecords = 0;
        for (const [key, value] of Object.entries(data)) {
          if (key !== 'metadata' && Array.isArray(value)) {
            totalRecords += value.length;
          }
        }
        
        console.log(`\n${i + 1}. ${file.name}`);
        console.log(`   –î–∞—Ç–∞: ${file.time.toLocaleString('ru-RU')}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(2)} KB`);
        console.log(`   –ó–∞–ø–∏—Å–µ–π: ${totalRecords}`);
      });
      console.log();
    }
  } else if (args[0] && fs.existsSync(args[0])) {
    restoreBackup(args[0]).catch(console.error);
  } else {
    interactiveRestore().catch(console.error);
  }
}

module.exports = { restoreBackup, listBackups };
